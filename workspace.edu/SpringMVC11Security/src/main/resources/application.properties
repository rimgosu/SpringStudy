# Spring Boot 환경설정하는 파일 (DB, Tomcat 등)
# Tomcat Server Port
server.port=8081

# Context Path 수정
# Context Path를 수정하지 않으면 기본 Context Path : /
# Context Path : /boot로 수정
server.servlet.context-path=/boot

# DB 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/com
spring.datasource.username=com
spring.datasource.password=com01

# Spring JPA 설정 (JDBC -> API) -> Hibernate(Spring JPA 구현체)
# Spring에서는 Mapper Interface -> SqlSessionFactoryBean이 구현
# Spring JPA에서는 Hibernate : SQL Query 빌드 (자동생성)
# 사용 예시
# Jpa클래스.save(vo) -> insert into Board (title, content, writer)
#                      valuese (#{title}, #{content}, #{writer})
# 직접 sql 문장을 짜는 게 아니라, .save() 매소드로 대체함.
# 복잡한 쿼리는 직접 짜야한다. 그러나 간단한 SQL문은 작성을 알아서 해주는 장점이 있다.

# JPA/Hibernate -> ORM(Object Relational Mapping) - 객체 관계 맵핑

# JPA
# MySQL 상세지정
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
# 스키마 생성 (create, update)
spring.jpa.hibernate.ddl-auto=update
# JPA가 실행하고 실행된 SQL문장 보기
spring.jpa.show-sql=true
# 실제 JPA 구현체인 Hibernate가 동작하면서 발생하는 SQL을 포멧팅해서 출력
spring.jpa.properties.hibernate.format_sql=true


# Spring Boot ViewResolver 설정
spring.mvc.view.prefix=/WEB-INF/
spring.mvc.view.suffix=.jsp



# Spring Boot에서 resources에 접근하기 위한 설정
spring.mvc.static-path-pattern=/resources/**

