# Spring Boot 환경설정하는 파일(DB,Tomcat 등)

# Tomcat Server Port 변경
server.port=8081

# Context Path 수정 
# Context Path 수정하지 않으면 기본 Context Path -> /  지금까지는 이렇게 사용함.
# Context Path -> /boot로 바꿀거임.
server.servlet.context-path=/boot

#DB설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/com
spring.datasource.username=com
spring.datasource.password=com01

#Spring JPA 설정( JDBC -> API) -> Hibernate(Spring JPA 구현체)
# Spring에서는 Mapper interface 구현시켜서 추상메서드를 구현시키는건 -> SQLSessionFactoryBean이 함.
# Spring JPA에서는 Hibernate : SQL Query 빌드(자동생성)
# 사용예시
# JPA클래스.save(vo)하면 insert into Board(title, content, writer)
#                                values(#{title},..)할 필요 없음.
# save라는 메서드가 다 처리해줌.
# 복잡한 쿼리는 직접 만들어야한다. (간단한 SQL문은 작성을 알아서 해주는 장점이 있다.)
# JPA/Hibernate를 ORM(Object Relational Mapping, 객체관계맵핑 )방식이라고 부름

#JPA
# MySQL 상세지정
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
#스키마 생성(create, update)
spring.jpa.hibernate.ddl-auto=update
#JPA가 실행하고 실행된 SQL문장 보기
spring.jpa.show-sql=true
#실제 JPA구현체인 Hibernate가 동작하면서 발생하는 SQL을 포맷팅해서 출력
spring.jpa.properties.hibernate.format_sql=true


#10.17화요일 Spring Boot ViewResolver 설정
spring.mvc.view.prefix=/WEB-INF/
spring.mvc.view.suffix=.jsp

# Spring Boot에서 resources에 접근하기 위한 설정
#resource아래 모든 폴더에 접근할 수 있도록 하겠다.
spring.mvc.static-path-pattern=/resources/**

